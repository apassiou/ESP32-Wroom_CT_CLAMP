#Written by apassiou v03.20.2025

#init
esphome:
  name: esp32-laundry-monitor
  friendly_name: "ESP32 Laundry Monitor v03.20.2025"
  platformio_options:
    board_build.flash_mode: dio  # Common setting for ESP32-WROOM
  on_boot: #Pull LEDS low on boot so that they dont glow
    priority: 100
    then:
      - repeat: #start up LED sequence to signify startup when plugged in
          count: 3
          then:
          - delay: 500ms
          - output.turn_on: led_blue 
          - delay: 500ms
          - output.turn_off: led_blue

      - output.turn_on: led_blue

      - repeat:
          count: 3
          then:
          - delay: 500ms
          - output.turn_on: led_red
          - delay: 500ms
          - output.turn_off: led_red

      - output.turn_on: led_red
      - delay: 1s
      - output.turn_off: led_blue
      - output.turn_off: led_red

      # Restore values to variables
      - lambda: |-
          id(washer_threshold) = id(washer_set_value).state;
          id(dryer_threshold) = id(dryer_set_value).state;

esp32:
  board: esp32dev  # Change based on your specific ESP32-WROOM board
  framework:
    type: esp-idf #Use 'arduino' if preferred

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password


# Enable logging
logger:

# Uncomment if you want to use the ESPHome API
api:

web_server:

ota:
  - platform: esphome

# i2c for aht10
i2c:
  sda: 21
  scl: 22
  scan: true
  id: i2cbus
  

# Define tresholds for when to consider Washer/Dryer as running
globals:
  - id: washer_threshold
    type: float
    initial_value: '0.20' #default, but can be changed in GUI

  - id: dryer_threshold
    type: float
    initial_value: '0.50' #default, but can be changed in GUI

# Define LEDs on GPIO4 (blue) and GPIO17 (red)
output:
  - platform: ledc
    pin: GPIO17
    id: led_blue
    frequency: 1000 Hz
    inverted: false

  - platform: ledc
    pin: GPIO4
    id: led_red
    frequency: 1000 Hz
    inverted: false

light:
  - platform: monochromatic
    name: "Blue LED"
    output: led_blue
    id: blue_led
    internal: true
    restore_mode: ALWAYS_OFF

  - platform: monochromatic
    name: "Red LED"
    output: led_red
    id: red_led
    internal: true
    restore_mode: ALWAYS_OFF

#Ability to change thresholds in GUI
number:
  - platform: template
    name: "Washing Machine Threshold (Default 0.2A)"
    id: washer_set_value
    icon: "mdi:sine-wave"
    initial_value: '0.20'  # Set an initial threshold value
    min_value: '0.1'
    max_value: '12.0'
    step: '0.01'
    optimistic: true 
    restore_value: true # Persists through reboots
    mode: box
    unit_of_measurement: 'A'
    set_action:
      - lambda: |-
          id(washer_threshold) = x;

  - platform: template
    name: "Dryer Threshold (Default 0.5A)"
    id: dryer_set_value
    icon: "mdi:sine-wave"
    initial_value: '0.50'  # Set an initial threshold value
    min_value: '0.1'
    max_value: '12.0'
    step: '0.01'
    optimistic: true 
    restore_value: true 
    mode: box
    unit_of_measurement: 'A'
    set_action:
      - lambda: |-
          id(dryer_threshold) = x;

#Home assistant states integration
binary_sensor:
  - platform: template
    name: "Washing Machine Status"
    icon: "mdi:washing-machine"
    id: washer_running
    lambda: |-
      if (id(washer_current).state >= id(washer_threshold)) {
        return true;
      } else {
        return false;
      }

  - platform: template
    name: "Dryer Status"
    icon: "mdi:tumble-dryer"
    id: dryer_running
    lambda: |-
      if (id(dryer_current).state >= id(dryer_threshold)) {
        return true;
      } else {
        return false;
      }

sensor: #Washing Machine
  - platform: ct_clamp
    sensor: adc_sensor_washer
    name: "Washing Machine Current"
    unit_of_measurement: "A"
    icon: "mdi:lightning-bolt-circle"
    id: washer_current
    update_interval: 7s
    filters:
      - sliding_window_moving_average: 
         window_size: 9 #keep roughly 1 min average
         send_every: 1
      - calibrate_linear:
          method: exact
          datapoints: #Confirmed values were taken on actual Washer/Dryer, rest were takes with other testing
          - 0.000 -> 0.000
          - 0.015 -> 0.000 # Confirmed
          - 0.018 -> 0.360
          - 0.024 -> 0.500 # Confirmed
          - 0.029 -> 0.710 
          - 0.042 -> 1.000 # Confirmed
          - 0.044 -> 1.008 # Confirmed
          - 0.088 -> 2.260 # Confirmed
          - 0.137 -> 3.540
          - 0.145 -> 3.500
          - 0.171 -> 4.320
          - 0.226 -> 5.550 # Confirmed - spin cycle
      - lambda: |-
            return x;      
    on_value:
      then: #LED on if Amperage is > than value specified
        - lambda: |-
            if (x > id(washer_threshold)) {
              id(blue_led).turn_on().set_brightness(0.25).perform();
            } else {
              id(led_blue).turn_off();
            }     

  - platform: ct_clamp #Dryer
    sensor: adc_sensor_dryer
    name: "Dryer Current"
    unit_of_measurement: "A"
    icon: "mdi:lightning-bolt-circle"
    id: dryer_current
    update_interval: 11s
    filters:
      - sliding_window_moving_average: 
         window_size: 6 #keep roughly 1 min average
         send_every: 1
      - calibrate_linear:
          method: exact
          datapoints:
          - 0.000 -> 0.000
          - 0.029 -> 0.000 # Confirmed. Everything is off state
          - 0.126 -> 3.480
          - 0.139 -> 3.650
          - 0.171 -> 4.320
          - 0.180 -> 4.640 # Confirmed
          - 0.207 -> 4.820
      - lambda: |-
            return x;      
    on_value:
      then: #LED on if Amperage is > than value specified
        - lambda: |-
            if (x > id(dryer_threshold)) {
              id(red_led).turn_on().set_brightness(0.40).perform();
            } else {
              id(led_red).turn_off();
            }     
  #AHT10 (temp/humidity)
  - platform: aht10
    variant: AHT20 #wont work with aht10
    i2c_id: i2cbus
    temperature:
      name: "Garage Temperature"
      id: aht10_temp
    humidity:
      name: "Garage Humidity"
      id: aht10_hum
    update_interval: 60s

  #ADCs for ct_clamp to use
  - platform: adc
    pin: GPIO39
    id: adc_sensor_washer
    update_interval: never #Using ct_clamp for everything, this is not needed enable for debug maybe
    unit_of_measurement: "V"
    attenuation: auto

  - platform: adc
    pin: GPIO36
    id: adc_sensor_dryer
    update_interval: never
    unit_of_measurement: "V"
    attenuation: auto
